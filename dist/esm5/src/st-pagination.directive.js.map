{"version":3,"file":"st-pagination.directive.js","sourceRoot":"","sources":["../../src/st-pagination.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, OnInit, OnDestroy} from '@angular/core';\nimport {SmartTable} from './smart-table.service';\nimport {paginationDirective as slice} from 'smart-table-core';\n\ninterface SummaryOutput {\n    page: number;\n    size: number;\n    filteredCount: number;\n}\n\n@Directive({\n    selector: '[stPagination]',\n    exportAs: 'stPagination'\n})\nexport class StPaginationDirective<T> implements OnInit, OnDestroy {\n    private _directive: any;\n\n    page = 1;\n    size = 20;\n    length: number;\n\n    constructor(private table: SmartTable<T>) {\n    }\n\n    ngOnInit() {\n        this._directive = slice({table: this.table});\n        this._directive.onSummaryChange(({page, size, filteredCount}: SummaryOutput) => {\n            let goToOne = false;\n            this.page = page;\n            // Il faut retourner sur la première page au besoin\n            if ((this.size !== size || this.length !== filteredCount) && this.page > 1) {\n                goToOne = true;\n            }\n            this.size = size;\n            this.length = filteredCount;\n            if (goToOne) {\n                this.selectPage(1);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this._directive.off();\n    }\n\n    get lowerBoundIndex(): number {\n        return (this.page - 1) * this.size;\n    }\n\n    get higherBoundIndex(): number {\n        return Math.min(this.page * this.size - 1, this.length - 1);\n    }\n\n    get pageCount(): number {\n        return this.size ? Math.ceil(this.length / this.size) : 1;\n    }\n\n    get pages(): number[] {\n        return Array.from({ length: this.pageCount }, (v, k) => k + 1);\n    }\n\n    selectPage(p: number): void {\n        return this._directive.selectPage(+(p));\n    }\n\n    selectNextPage(): void {\n        return this._directive.selectNextPage();\n    }\n\n    selectPreviousPage(): void {\n        return this._directive.selectPreviousPage();\n    }\n\n    changePageSize(size: number): void {\n        // Force number cast;\n        return this._directive.changePageSize(+(size));\n    }\n\n    isPreviousPageEnabled(): boolean {\n        return this._directive.isPreviousPageEnabled();\n    }\n\n    isNextPageEnabled(): boolean {\n        return this._directive.isNextPageEnabled();\n    }\n}\n"]}