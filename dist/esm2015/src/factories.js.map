{"version":3,"file":"factories.js","sourceRoot":"","sources":["../package/src/factories.ts"],"names":[],"mappings":";;;;AACA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,KAAK,IAAI,OAAO,EAAC,MAAM,kBAAkB,CAAC;AAElD,OAAO,EAAkB,EAAE,IAAI,YAAY,EAAE,IAAI,IAAI,cAAc,EAAC,MAAM,YAAY,CAAC;AAEvF,MAAM,CAAC,uBAAM,IAAI,GAAG,CAAI,IAA0B,EAAE,UAAU,GAAG,IAAI,UAAU,EAAE,EAAE,GAAG,UAI5E,EAAuC,EAAE;IAC/C,uBAAM,SAAS,GAAQ,EAAE,CAAC;IAC1B,uBAAM,KAAK,GAAG,OAAO,CAAC,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAC,EAAE,GAAG,UAAU,CAAC,CAAC;IACpE,qBAAI,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;IAClC,qBAAI,YAA0B,CAAC;IAE/B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;;;;QACxB,IAAI;YACA,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACjB,YAAY,CAAC,WAAW,EAAE,CAAC;aAC5B;YACD,KAAK,CAAC,QAAQ,oCAAwB,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;YACvD,YAAY,GAAG,MAAM;iBAChB,SAAS,CAAC,CAAC,KAAU,EAAE,EAAE;gBACtB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;gBAChD,KAAK,CAAC,IAAI,EAAE,CAAC;aAChB,CAAC,CAAC;SACV;;;;;QACD,GAAG,CAAC,OAAY;YACZ,YAAY,CAAC,WAAW,EAAE,CAAC;YAC3B,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;YAC/B,KAAK,CAAC,QAAQ,oCAAwB,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;YACvD,YAAY,GAAG,MAAM;iBAChB,SAAS,CAAC,CAAC,MAAW,EAAE,EAAE;gBACvB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;gBACjD,KAAK,CAAC,IAAI,EAAE,CAAC;aAChB,CAAC,CAAC;SACV;;;;QACD,WAAW;YACP,YAAY,CAAC,WAAW,EAAE,CAAC;SAC9B;KACJ,CAAC,CAAC;CACN,CAAC;AAEF,MAAM,CAAC,uBAAM,EAAE,GAAG,CAAI,IAAS,EAAE,UAAU,GAAG,IAAI,UAAU,EAAE,EAAE,GAAG,UAIzD,EAAuC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC,CAAC","sourcesContent":["import {SmartTableCore, NgSmartTable, StEvents} from './common-types';\nimport {TableState} from './table-state';\nimport {table as stTable} from 'smart-table-core';\nimport {Subscription} from 'rxjs/internal/Subscription';\nimport {ObservableInput, of as observableOf, from as observableFrom} from 'rxjs/index';\n\nexport const from = <T>(data: ObservableInput<T[]>, tableState = new TableState(), ...extensions: (<U>(input: {\n    table: SmartTableCore<T>;\n    data: T[];\n    tableState: TableState;\n}) => U)[]): SmartTableCore<T> & NgSmartTable<T> => {\n    const dataArray: T[] = [];\n    const table = stTable({data: dataArray, tableState}, ...extensions);\n    let source = observableFrom(data);\n    let subscription: Subscription;\n\n    return Object.assign(table, {\n        init() {\n            if (subscription) {\n              subscription.unsubscribe();\n            }\n            table.dispatch(StEvents.EXEC_CHANGED, {working: true});\n            subscription = source\n                .subscribe((items: T[]) => {\n                    dataArray.splice(0, dataArray.length, ...items);\n                    table.exec();\n                });\n        },\n        use(newData: T[]) {\n            subscription.unsubscribe();\n            source = observableOf(newData);\n            table.dispatch(StEvents.EXEC_CHANGED, {working: true});\n            subscription = source\n                .subscribe((values: T[]) => {\n                    dataArray.splice(0, dataArray.length, ...values);\n                    table.exec();\n                });\n        },\n        ngOnDestroy() {\n            subscription.unsubscribe();\n        }\n    });\n};\n\nexport const of = <T>(data: T[], tableState = new TableState(), ...extensions: (<U>(input: {\n    table: SmartTableCore<T>;\n    data: T[];\n    tableState: TableState;\n}) => U)[]): SmartTableCore<T> & NgSmartTable<T> => from(observableOf(data), tableState, ...extensions);\n"]}